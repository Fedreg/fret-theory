var _jinjor$elm_inline_hover$InlineHover$isValidChars = function (list) {
	isValidChars:
	while (true) {
		var _p0 = list;
		if (_p0.ctor === '::') {
			var _p1 = _p0._0;
			if (_elm_lang$core$Char$isLower(_p1) || _elm_lang$core$Native_Utils.eq(
				_p1,
				_elm_lang$core$Native_Utils.chr('-'))) {
				var _v1 = _p0._1;
				list = _v1;
				continue isValidChars;
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
};
var _jinjor$elm_inline_hover$InlineHover$isValidKey = function (s) {
	return (!_elm_lang$core$Native_Utils.eq(s, '')) && (A2(
		_elm_lang$core$List$any,
		_elm_lang$core$Char$isLower,
		_elm_lang$core$String$toList(s)) && A2(
		_elm_lang$core$List$all,
		function (c) {
			return _elm_lang$core$Char$isLower(c) || _elm_lang$core$Native_Utils.eq(
				c,
				_elm_lang$core$Native_Utils.chr('-'));
		},
		_elm_lang$core$String$toList(s)));
};
var _jinjor$elm_inline_hover$InlineHover$toCamelCase = function (s) {
	return _elm_lang$core$String$fromList(
		_elm_lang$core$List$reverse(
			_elm_lang$core$Tuple$second(
				A3(
					_elm_lang$core$List$foldl,
					F2(
						function (c, _p2) {
							var _p3 = _p2;
							var _p4 = _p3._1;
							return _elm_lang$core$Native_Utils.eq(
								c,
								_elm_lang$core$Native_Utils.chr('-')) ? {ctor: '_Tuple2', _0: true, _1: _p4} : (_p3._0 ? {
								ctor: '_Tuple2',
								_0: false,
								_1: {
									ctor: '::',
									_0: _elm_lang$core$Char$toUpper(c),
									_1: _p4
								}
							} : {
								ctor: '_Tuple2',
								_0: false,
								_1: {ctor: '::', _0: c, _1: _p4}
							});
						}),
					{
						ctor: '_Tuple2',
						_0: false,
						_1: {ctor: '[]'}
					},
					_elm_lang$core$String$toList(s)))));
};
var _jinjor$elm_inline_hover$InlineHover$enterEach = function (_p5) {
	var _p6 = _p5;
	var _p8 = _p6._0;
	var escapedValue = function (_p7) {
		return A2(
			_elm_lang$core$String$join,
			'\"',
			A2(_elm_lang$core$String$split, '\'', _p7));
	}(_p6._1);
	var keyCamel = _jinjor$elm_inline_hover$InlineHover$toCamelCase(_p8);
	return A2(
		_elm_lang$core$Basics_ops['++'],
		'this.setAttribute(\'data-hover-',
		A2(
			_elm_lang$core$Basics_ops['++'],
			_p8,
			A2(
				_elm_lang$core$Basics_ops['++'],
				'\', this.style.',
				A2(
					_elm_lang$core$Basics_ops['++'],
					keyCamel,
					A2(
						_elm_lang$core$Basics_ops['++'],
						'||\'\');',
						A2(
							_elm_lang$core$Basics_ops['++'],
							'this.style.',
							A2(
								_elm_lang$core$Basics_ops['++'],
								keyCamel,
								A2(
									_elm_lang$core$Basics_ops['++'],
									'=\'',
									A2(_elm_lang$core$Basics_ops['++'], escapedValue, '\'')))))))));
};
var _jinjor$elm_inline_hover$InlineHover$leaveEach = function (_p9) {
	var _p10 = _p9;
	var _p11 = _p10._0;
	var keyCamel = _jinjor$elm_inline_hover$InlineHover$toCamelCase(_p11);
	return A2(
		_elm_lang$core$Basics_ops['++'],
		'this.style.',
		A2(
			_elm_lang$core$Basics_ops['++'],
			keyCamel,
			A2(
				_elm_lang$core$Basics_ops['++'],
				'=this.getAttribute(\'data-hover-',
				A2(_elm_lang$core$Basics_ops['++'], _p11, '\')||\'\';'))));
};
var _jinjor$elm_inline_hover$InlineHover$hover = F4(
	function (styles, tag, attrs, children) {
		var validStyles = A2(
			_elm_lang$core$List$filter,
			function (_p12) {
				var _p13 = _p12;
				return _jinjor$elm_inline_hover$InlineHover$isValidKey(_p13._0);
			},
			styles);
		var enter = A2(
			_elm_lang$html$Html_Attributes$attribute,
			'onmouseenter',
			A2(
				_elm_lang$core$String$join,
				';',
				A2(_elm_lang$core$List$map, _jinjor$elm_inline_hover$InlineHover$enterEach, validStyles)));
		var leave = A2(
			_elm_lang$html$Html_Attributes$attribute,
			'onmouseleave',
			A2(
				_elm_lang$core$String$join,
				';',
				A2(_elm_lang$core$List$map, _jinjor$elm_inline_hover$InlineHover$leaveEach, validStyles)));
		return A2(
			tag,
			{
				ctor: '::',
				_0: enter,
				_1: {ctor: '::', _0: leave, _1: attrs}
			},
			children);
	});
