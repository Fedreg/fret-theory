var _user$project$Logic_Routing$fingerPickingPath = '#fingerpicking/';
var _user$project$Logic_Routing$homePath = '#home/';
var _user$project$Logic_Routing$strummingPath = '#strumming/';
var _user$project$Logic_Routing$fretboardPath = function (key) {
	return A2(_elm_lang$core$Basics_ops['++'], '#fretboard/', key);
};
var _user$project$Logic_Routing$scalesPath = function (key) {
	return A2(_elm_lang$core$Basics_ops['++'], '#scales/', key);
};
var _user$project$Logic_Routing$chordsPath = function (key) {
	return A2(_elm_lang$core$Basics_ops['++'], '#chords/', key);
};
var _user$project$Logic_Routing$modelUpdateOnHash = F2(
	function (model, location) {
		var _p0 = model.route;
		switch (_p0.ctor) {
			case 'ChordsRoute':
				return A2(
					_evancz$url_parser$UrlParser$parseHash,
					A2(
						_evancz$url_parser$UrlParser_ops['</>'],
						_evancz$url_parser$UrlParser$s('chords'),
						_evancz$url_parser$UrlParser$string),
					location);
			case 'ScalesRoute':
				return A2(
					_evancz$url_parser$UrlParser$parseHash,
					A2(
						_evancz$url_parser$UrlParser_ops['</>'],
						_evancz$url_parser$UrlParser$s('scales'),
						_evancz$url_parser$UrlParser$string),
					location);
			case 'FretboardRoute':
				return A2(
					_evancz$url_parser$UrlParser$parseHash,
					A2(
						_evancz$url_parser$UrlParser_ops['</>'],
						_evancz$url_parser$UrlParser$s('fretboard'),
						_evancz$url_parser$UrlParser$string),
					location);
			case 'StrummingRoute':
				return A2(
					_evancz$url_parser$UrlParser$parseHash,
					A2(
						_evancz$url_parser$UrlParser_ops['</>'],
						_evancz$url_parser$UrlParser$s('strum'),
						_evancz$url_parser$UrlParser$string),
					location);
			case 'FingerPickingRoute':
				return A2(
					_evancz$url_parser$UrlParser$parseHash,
					A2(
						_evancz$url_parser$UrlParser_ops['</>'],
						_evancz$url_parser$UrlParser$s('fingerpicking'),
						_evancz$url_parser$UrlParser$string),
					location);
			case 'HomeRoute':
				return A2(
					_evancz$url_parser$UrlParser$parseHash,
					A2(
						_evancz$url_parser$UrlParser_ops['</>'],
						_evancz$url_parser$UrlParser$s('home'),
						_evancz$url_parser$UrlParser$string),
					location);
			default:
				return A2(
					_evancz$url_parser$UrlParser$parseHash,
					A2(
						_evancz$url_parser$UrlParser_ops['</>'],
						_evancz$url_parser$UrlParser$s(''),
						_evancz$url_parser$UrlParser$string),
					location);
		}
	});
var _user$project$Logic_Routing$matchers = _evancz$url_parser$UrlParser$oneOf(
	{
		ctor: '::',
		_0: A2(
			_evancz$url_parser$UrlParser$map,
			_user$project$Logic_Types$HomeRoute,
			_evancz$url_parser$UrlParser$s('home')),
		_1: {
			ctor: '::',
			_0: A2(
				_evancz$url_parser$UrlParser$map,
				_user$project$Logic_Types$ChordsRoute,
				A2(
					_evancz$url_parser$UrlParser_ops['</>'],
					_evancz$url_parser$UrlParser$s('chords'),
					_evancz$url_parser$UrlParser$string)),
			_1: {
				ctor: '::',
				_0: A2(
					_evancz$url_parser$UrlParser$map,
					_user$project$Logic_Types$ScalesRoute,
					A2(
						_evancz$url_parser$UrlParser_ops['</>'],
						_evancz$url_parser$UrlParser$s('scales'),
						_evancz$url_parser$UrlParser$string)),
				_1: {
					ctor: '::',
					_0: A2(
						_evancz$url_parser$UrlParser$map,
						_user$project$Logic_Types$FretboardRoute,
						A2(
							_evancz$url_parser$UrlParser_ops['</>'],
							_evancz$url_parser$UrlParser$s('fretboard'),
							_evancz$url_parser$UrlParser$string)),
					_1: {
						ctor: '::',
						_0: A2(
							_evancz$url_parser$UrlParser$map,
							_user$project$Logic_Types$StrummingRoute,
							_evancz$url_parser$UrlParser$s('strumming')),
						_1: {
							ctor: '::',
							_0: A2(
								_evancz$url_parser$UrlParser$map,
								_user$project$Logic_Types$FingerPickingRoute,
								_evancz$url_parser$UrlParser$s('fingerpicking')),
							_1: {ctor: '[]'}
						}
					}
				}
			}
		}
	});
var _user$project$Logic_Routing$parseLocation = function (location) {
	var _p1 = A2(_evancz$url_parser$UrlParser$parseHash, _user$project$Logic_Routing$matchers, location);
	if (_p1.ctor === 'Just') {
		return _p1._0;
	} else {
		return _user$project$Logic_Types$NotFoundRoute;
	}
};
