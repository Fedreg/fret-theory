var _user$project$Fingerpick_View$printNotation = function (notes) {
	var markup = F3(
		function (fill, dot, flag) {
			return A2(
				_elm_lang$html$Html$div,
				{
					ctor: '::',
					_0: _user$project$Styles_FingerPickStyles$fingerPickNotationContainerStyle,
					_1: {ctor: '[]'}
				},
				{
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$div,
						{
							ctor: '::',
							_0: _user$project$Styles_FingerPickStyles$fingerPickNotationBaseStyles(fill),
							_1: {ctor: '[]'}
						},
						{ctor: '[]'}),
					_1: {
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$div,
							{
								ctor: '::',
								_0: _user$project$Styles_FingerPickStyles$fingerPickNotationFlagStyle(flag),
								_1: {ctor: '[]'}
							},
							{
								ctor: '::',
								_0: _elm_lang$html$Html$text(')'),
								_1: {ctor: '[]'}
							}),
						_1: {
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html$div,
								{
									ctor: '::',
									_0: _user$project$Styles_FingerPickStyles$fingerPickNotationDotStyle,
									_1: {ctor: '[]'}
								},
								{
									ctor: '::',
									_0: _elm_lang$html$Html$text(dot),
									_1: {ctor: '[]'}
								}),
							_1: {ctor: '[]'}
						}
					}
				});
		});
	var _p0 = notes;
	switch (_p0) {
		case 0:
			return A2(
				_elm_lang$html$Html$div,
				{ctor: '[]'},
				{ctor: '[]'});
		case 1:
			return A3(markup, '#555', '', 'visible');
		case 2:
			return A3(markup, '#555', '', 'hidden');
		case 3:
			return A3(markup, '#555', '.', 'hidden');
		case 4:
			return A3(markup, 'none', '', 'hidden');
		default:
			return A2(
				_elm_lang$html$Html$div,
				{ctor: '[]'},
				{ctor: '[]'});
	}
};
var _user$project$Fingerpick_View$calculateNotation = F4(
	function (list, index, notes1, notes2) {
		calculateNotation:
		while (true) {
			var getter2 = function (a) {
				return A2(
					_elm_lang$core$Maybe$withDefault,
					1,
					A2(_elm_community$list_extra$List_Extra$getAt, index + a, notes2));
			};
			var possibleNotes2 = function (a) {
				return A2(
					_elm_lang$core$List$member,
					getter2(a),
					A2(_elm_lang$core$List$range, 1, 5));
			};
			var getter1 = function (a) {
				return A2(
					_elm_lang$core$Maybe$withDefault,
					1,
					A2(_elm_community$list_extra$List_Extra$getAt, index + a, notes1));
			};
			var possibleNotes1 = function (a) {
				return A2(
					_elm_lang$core$List$member,
					getter1(a),
					A2(_elm_lang$core$List$range, 1, 5));
			};
			var possibleNotes = function (a) {
				return possibleNotes1(a) || possibleNotes2(a);
			};
			var notation = (_elm_lang$core$Native_Utils.eq(
				possibleNotes(0),
				true) && _elm_lang$core$Native_Utils.eq(
				possibleNotes(1),
				false)) ? (_elm_lang$core$Native_Utils.eq(
				possibleNotes(2),
				true) ? 2 : (_elm_lang$core$Native_Utils.eq(
				possibleNotes(3),
				true) ? 3 : 4)) : ((_elm_lang$core$Native_Utils.eq(
				possibleNotes(0),
				true) && _elm_lang$core$Native_Utils.eq(
				possibleNotes(1),
				true)) ? 1 : ((_elm_lang$core$Native_Utils.eq(
				possibleNotes(4),
				true) && _elm_lang$core$Native_Utils.eq(
				possibleNotes(7),
				false)) ? 4 : 0));
			if (_elm_lang$core$Native_Utils.cmp(
				index,
				_elm_lang$core$List$length(notes1)) < 0) {
				var _v1 = {ctor: '::', _0: notation, _1: list},
					_v2 = index + 1,
					_v3 = notes1,
					_v4 = notes2;
				list = _v1;
				index = _v2;
				notes1 = _v3;
				notes2 = _v4;
				continue calculateNotation;
			} else {
				return _elm_lang$core$List$reverse(list);
			}
		}
	});
var _user$project$Fingerpick_View$chordNotes = function (model) {
	var finalChord = {ctor: '[]'};
	var bar = A2(
		_elm_lang$core$Maybe$withDefault,
		'',
		A2(
			_elm_community$list_extra$List_Extra$getAt,
			0,
			function (_) {
				return _.bars;
			}(model.displayedChords)));
	var adder = function (a) {
		return _elm_lang$core$Native_Utils.eq(bar, '') ? a : (_elm_lang$core$Native_Utils.eq(a, '') ? a : _elm_lang$core$Basics$toString(
			_elm_lang$core$Basics$negate(
				A2(
					F2(
						function (x, y) {
							return x - y;
						}),
					2,
					A2(
						_elm_lang$core$Result$withDefault,
						0,
						A3(
							_elm_lang$core$Result$map2,
							F2(
								function (x, y) {
									return x + y;
								}),
							_elm_lang$core$String$toInt(a),
							_elm_lang$core$String$toInt(bar)))))));
	};
	var chord = function (_) {
		return _.i;
	}(model.displayedChords);
	var slicer = F2(
		function (a, b) {
			return A3(_elm_lang$core$String$slice, a, b, chord);
		});
	return (_elm_lang$core$Native_Utils.eq(
		A2(slicer, 2, 3),
		'x') && _elm_lang$core$Native_Utils.eq(
		A2(slicer, 5, 6),
		'x')) ? A2(
		_elm_lang$core$List$map,
		adder,
		A2(
			F2(
				function (x, y) {
					return A2(_elm_lang$core$Basics_ops['++'], x, y);
				}),
			{
				ctor: '::',
				_0: A2(slicer, 17, 18),
				_1: finalChord
			},
			A2(
				F2(
					function (x, y) {
						return A2(_elm_lang$core$Basics_ops['++'], x, y);
					}),
				{
					ctor: '::',
					_0: A2(slicer, 14, 15),
					_1: finalChord
				},
				A2(
					F2(
						function (x, y) {
							return A2(_elm_lang$core$Basics_ops['++'], x, y);
						}),
					{
						ctor: '::',
						_0: A2(slicer, 11, 12),
						_1: finalChord
					},
					A2(
						F2(
							function (x, y) {
								return A2(_elm_lang$core$Basics_ops['++'], x, y);
							}),
						{
							ctor: '::',
							_0: A2(slicer, 8, 9),
							_1: finalChord
						},
						A2(
							F2(
								function (x, y) {
									return A2(_elm_lang$core$Basics_ops['++'], x, y);
								}),
							{ctor: '::', _0: '', _1: finalChord},
							{ctor: '::', _0: '', _1: finalChord})))))) : (_elm_lang$core$Native_Utils.eq(
		A2(slicer, 2, 3),
		'x') ? A2(
		_elm_lang$core$List$map,
		adder,
		A2(
			F2(
				function (x, y) {
					return A2(_elm_lang$core$Basics_ops['++'], x, y);
				}),
			{
				ctor: '::',
				_0: A2(slicer, 17, 18),
				_1: finalChord
			},
			A2(
				F2(
					function (x, y) {
						return A2(_elm_lang$core$Basics_ops['++'], x, y);
					}),
				{
					ctor: '::',
					_0: A2(slicer, 14, 15),
					_1: finalChord
				},
				A2(
					F2(
						function (x, y) {
							return A2(_elm_lang$core$Basics_ops['++'], x, y);
						}),
					{
						ctor: '::',
						_0: A2(slicer, 11, 12),
						_1: finalChord
					},
					A2(
						F2(
							function (x, y) {
								return A2(_elm_lang$core$Basics_ops['++'], x, y);
							}),
						{
							ctor: '::',
							_0: A2(slicer, 8, 9),
							_1: finalChord
						},
						A2(
							F2(
								function (x, y) {
									return A2(_elm_lang$core$Basics_ops['++'], x, y);
								}),
							{
								ctor: '::',
								_0: A2(slicer, 5, 6),
								_1: finalChord
							},
							{ctor: '::', _0: '', _1: finalChord})))))) : A2(
		_elm_lang$core$List$map,
		adder,
		A2(
			F2(
				function (x, y) {
					return A2(_elm_lang$core$Basics_ops['++'], x, y);
				}),
			{
				ctor: '::',
				_0: A2(slicer, 17, 18),
				_1: finalChord
			},
			A2(
				F2(
					function (x, y) {
						return A2(_elm_lang$core$Basics_ops['++'], x, y);
					}),
				{
					ctor: '::',
					_0: A2(slicer, 14, 15),
					_1: finalChord
				},
				A2(
					F2(
						function (x, y) {
							return A2(_elm_lang$core$Basics_ops['++'], x, y);
						}),
					{
						ctor: '::',
						_0: A2(slicer, 11, 12),
						_1: finalChord
					},
					A2(
						F2(
							function (x, y) {
								return A2(_elm_lang$core$Basics_ops['++'], x, y);
							}),
						{
							ctor: '::',
							_0: A2(slicer, 8, 9),
							_1: finalChord
						},
						A2(
							F2(
								function (x, y) {
									return A2(_elm_lang$core$Basics_ops['++'], x, y);
								}),
							{
								ctor: '::',
								_0: A2(slicer, 5, 6),
								_1: finalChord
							},
							{
								ctor: '::',
								_0: A2(slicer, 2, 3),
								_1: finalChord
							})))))));
};
var _user$project$Fingerpick_View$stringView = A2(
	_elm_lang$html$Html$div,
	{
		ctor: '::',
		_0: _elm_lang$html$Html_Attributes$style(
			{
				ctor: '::',
				_0: A2(_user$project$Logic_Utils_ops['=>'], 'marginBottom', '20px'),
				_1: {ctor: '[]'}
			}),
		_1: {ctor: '[]'}
	},
	{
		ctor: '::',
		_0: A2(
			_elm_lang$html$Html$div,
			{
				ctor: '::',
				_0: _user$project$Styles_FingerPickStyles$stringStyle,
				_1: {ctor: '[]'}
			},
			{ctor: '[]'}),
		_1: {
			ctor: '::',
			_0: A2(
				_elm_lang$html$Html$div,
				{
					ctor: '::',
					_0: _user$project$Styles_FingerPickStyles$stringStyle,
					_1: {ctor: '[]'}
				},
				{ctor: '[]'}),
			_1: {
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$div,
					{
						ctor: '::',
						_0: _user$project$Styles_FingerPickStyles$stringStyle,
						_1: {ctor: '[]'}
					},
					{ctor: '[]'}),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$div,
						{
							ctor: '::',
							_0: _user$project$Styles_FingerPickStyles$stringStyle,
							_1: {ctor: '[]'}
						},
						{ctor: '[]'}),
					_1: {
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$div,
							{
								ctor: '::',
								_0: _user$project$Styles_FingerPickStyles$stringStyle,
								_1: {ctor: '[]'}
							},
							{ctor: '[]'}),
						_1: {
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html$div,
								{
									ctor: '::',
									_0: _user$project$Styles_FingerPickStyles$stringStyle,
									_1: {ctor: '[]'}
								},
								{ctor: '[]'}),
							_1: {ctor: '[]'}
						}
					}
				}
			}
		}
	});
var _user$project$Fingerpick_View$fret = F2(
	function (num, model) {
		var opacity = function () {
			var _p1 = num;
			if (_p1 === 0) {
				return '0';
			} else {
				return '1';
			}
		}();
		var height = function () {
			var _p2 = num;
			switch (_p2) {
				case 1:
					return '-202px';
				case 2:
					return '-168px';
				case 3:
					return '-135px';
				case 4:
					return '-103px';
				case 5:
					return '-70px';
				case 6:
					return '-37px';
				default:
					return '0';
			}
		}();
		var baseStyles = _elm_lang$html$Html_Attributes$style(
			{
				ctor: '::',
				_0: A2(_user$project$Logic_Utils_ops['=>'], 'display', 'flex'),
				_1: {
					ctor: '::',
					_0: A2(_user$project$Logic_Utils_ops['=>'], 'marginTop', height),
					_1: {
						ctor: '::',
						_0: A2(_user$project$Logic_Utils_ops['=>'], 'width', '120px'),
						_1: {
							ctor: '::',
							_0: A2(_user$project$Logic_Utils_ops['=>'], 'fontSize', '20px'),
							_1: {
								ctor: '::',
								_0: A2(_user$project$Logic_Utils_ops['=>'], 'color', '#000'),
								_1: {
									ctor: '::',
									_0: A2(_user$project$Logic_Utils_ops['=>'], 'justifyContent', 'center'),
									_1: {
										ctor: '::',
										_0: A2(_user$project$Logic_Utils_ops['=>'], 'opacity', opacity),
										_1: {ctor: '[]'}
									}
								}
							}
						}
					}
				}
			});
		var getter = function (a) {
			return A2(
				_elm_lang$core$Maybe$withDefault,
				'',
				A2(
					_elm_community$list_extra$List_Extra$getAt,
					a,
					_user$project$Fingerpick_View$chordNotes(model)));
		};
		var message = function () {
			var _p3 = num;
			switch (_p3) {
				case 1:
					return getter(0);
				case 2:
					return getter(1);
				case 3:
					return getter(2);
				case 4:
					return getter(3);
				case 5:
					return getter(4);
				case 6:
					return getter(5);
				default:
					return '';
			}
		}();
		return A2(
			_elm_lang$html$Html$div,
			{
				ctor: '::',
				_0: baseStyles,
				_1: {ctor: '[]'}
			},
			{
				ctor: '::',
				_0: _elm_lang$html$Html$text(message),
				_1: {ctor: '[]'}
			});
	});
var _user$project$Fingerpick_View$fingerPickGroup = F4(
	function (scale, notes1, notes2, model) {
		var frets = function (a) {
			return A2(
				_elm_lang$html$Html$div,
				{ctor: '[]'},
				{
					ctor: '::',
					_0: A2(_user$project$Fingerpick_View$fret, a, model),
					_1: {ctor: '[]'}
				});
		};
		var notation = function (a) {
			return A2(
				_elm_lang$html$Html$div,
				{
					ctor: '::',
					_0: _user$project$Styles_FingerPickStyles$fingerPickGroupNotationStyle,
					_1: {ctor: '[]'}
				},
				{
					ctor: '::',
					_0: _user$project$Fingerpick_View$printNotation(a),
					_1: {ctor: '[]'}
				});
		};
		var beats = function (a) {
			return A2(
				_elm_lang$html$Html$div,
				{
					ctor: '::',
					_0: _user$project$Styles_FingerPickStyles$fingerPickGroupBeatStyle,
					_1: {ctor: '[]'}
				},
				{
					ctor: '::',
					_0: _elm_lang$html$Html$text(
						_elm_lang$core$Basics$toString(a)),
					_1: {ctor: '[]'}
				});
		};
		return A2(
			_elm_lang$html$Html$div,
			{
				ctor: '::',
				_0: _user$project$Styles_FingerPickStyles$fingerPickGroupStyle(scale),
				_1: {ctor: '[]'}
			},
			{
				ctor: '::',
				_0: _user$project$Fingerpick_View$stringView,
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$div,
						{
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$style(
								{
									ctor: '::',
									_0: A2(_user$project$Logic_Utils_ops['=>'], 'display', 'flex'),
									_1: {ctor: '[]'}
								}),
							_1: {ctor: '[]'}
						},
						A2(_elm_lang$core$List$map, frets, notes1)),
					_1: {
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$div,
							{
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$style(
									{
										ctor: '::',
										_0: A2(_user$project$Logic_Utils_ops['=>'], 'display', 'flex'),
										_1: {ctor: '[]'}
									}),
								_1: {ctor: '[]'}
							},
							A2(_elm_lang$core$List$map, frets, notes2)),
						_1: {
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html$div,
								{
									ctor: '::',
									_0: _user$project$Styles_FingerPickStyles$beatStyle,
									_1: {ctor: '[]'}
								},
								A2(
									_elm_lang$core$List$map,
									beats,
									A2(_elm_lang$core$List$range, 1, 8))),
							_1: {
								ctor: '::',
								_0: A2(
									_elm_lang$html$Html$div,
									{
										ctor: '::',
										_0: _elm_lang$html$Html_Attributes$style(
											{
												ctor: '::',
												_0: A2(_user$project$Logic_Utils_ops['=>'], 'display', 'flex'),
												_1: {ctor: '[]'}
											}),
										_1: {ctor: '[]'}
									},
									A2(
										_elm_lang$core$List$map,
										notation,
										A4(
											_user$project$Fingerpick_View$calculateNotation,
											{ctor: '[]'},
											0,
											notes1,
											notes2))),
								_1: {ctor: '[]'}
							}
						}
					}
				}
			});
	});
var _user$project$Fingerpick_View$fingerPickingPage = function (model) {
	return A2(
		_elm_lang$html$Html$div,
		{
			ctor: '::',
			_0: _user$project$Styles_FingerPickStyles$fingerPickingPageStyle,
			_1: {ctor: '[]'}
		},
		{
			ctor: '::',
			_0: A2(
				_elm_lang$html$Html$h1,
				{
					ctor: '::',
					_0: _user$project$Styles_FingerPickStyles$fingerPickChordTitleStyle,
					_1: {ctor: '[]'}
				},
				{
					ctor: '::',
					_0: A5(
						_user$project$Views_Chords$chordChartModel,
						model,
						0,
						'',
						function (_) {
							return _.i;
						},
						function (_) {
							return _.i;
						}),
					_1: {ctor: '[]'}
				}),
			_1: {
				ctor: '::',
				_0: A4(_user$project$Fingerpick_View$fingerPickGroup, '1,1', model.fingerPickPattern.a, model.fingerPickPattern.b, model),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$button,
						{
							ctor: '::',
							_0: _user$project$Styles_FingerPickStyles$buttonStyle,
							_1: {
								ctor: '::',
								_0: _elm_lang$html$Html_Events$onClick(
									A2(_user$project$Logic_Types$Randomize, 0, 8)),
								_1: {ctor: '[]'}
							}
						},
						{
							ctor: '::',
							_0: _elm_lang$html$Html$text('Generate Random Fingerpicking Pattern'),
							_1: {ctor: '[]'}
						}),
					_1: {
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$div,
							{ctor: '[]'},
							{
								ctor: '::',
								_0: _elm_lang$html$Html$text(
									_elm_lang$core$Basics$toString(
										_user$project$Fingerpick_View$chordNotes(model))),
								_1: {ctor: '[]'}
							}),
						_1: {ctor: '[]'}
					}
				}
			}
		});
};
