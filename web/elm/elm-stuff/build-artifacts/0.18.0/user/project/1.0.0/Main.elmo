var _user$project$Main$chordDecoder = A3(
	_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
	'key',
	_elm_lang$core$Json_Decode$string,
	A3(
		_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
		'names',
		_elm_lang$core$Json_Decode$list(_elm_lang$core$Json_Decode$string),
		A3(
			_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
			'bars',
			_elm_lang$core$Json_Decode$list(_elm_lang$core$Json_Decode$string),
			A3(
				_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
				'vi7',
				_elm_lang$core$Json_Decode$string,
				A3(
					_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
					'v7',
					_elm_lang$core$Json_Decode$string,
					A3(
						_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
						'iv7',
						_elm_lang$core$Json_Decode$string,
						A3(
							_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
							'i7',
							_elm_lang$core$Json_Decode$string,
							A3(
								_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
								'vii',
								_elm_lang$core$Json_Decode$string,
								A3(
									_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
									'vi',
									_elm_lang$core$Json_Decode$string,
									A3(
										_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
										'v',
										_elm_lang$core$Json_Decode$string,
										A3(
											_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
											'iv',
											_elm_lang$core$Json_Decode$string,
											A3(
												_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
												'iii',
												_elm_lang$core$Json_Decode$string,
												A3(
													_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
													'ii',
													_elm_lang$core$Json_Decode$string,
													A3(
														_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
														'i',
														_elm_lang$core$Json_Decode$string,
														_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$decode(_user$project$Logic_Types$ChordChartData)))))))))))))));
var _user$project$Main$subscriptions = function (model) {
	return _elm_lang$core$Platform_Sub$batch(
		{
			ctor: '::',
			_0: function () {
				var val = _elm_lang$core$Basics$toFloat(model.sliderValue) / 10.0;
				return (_elm_lang$core$Native_Utils.cmp(
					model.index,
					_elm_lang$core$List$length(model.currentChord)) < 0) ? A2(
					_elm_lang$core$Time$every,
					val * _elm_lang$core$Time$second,
					_elm_lang$core$Basics$always(_user$project$Logic_Types$SendNotes)) : _elm_lang$core$Platform_Sub$none;
			}(),
			_1: {
				ctor: '::',
				_0: A2(_fbonetti$elm_phoenix_socket$Phoenix_Socket$listen, model.phxSocket, _user$project$Logic_Types$PhoenixMsg),
				_1: {ctor: '[]'}
			}
		});
};
var _user$project$Main$initPhoenixSocket = A4(
	_fbonetti$elm_phoenix_socket$Phoenix_Socket$on,
	'chord_select',
	'chordChannel:chords',
	_user$project$Logic_Types$ReceiveMessage,
	_fbonetti$elm_phoenix_socket$Phoenix_Socket$withDebug(
		_fbonetti$elm_phoenix_socket$Phoenix_Socket$init('wss://damp-wave-74595.herokuapp.com/socket/websocket')));
var _user$project$Main$joinChannel = A2(
	_elm_lang$core$Task$perform,
	_elm_lang$core$Basics$identity,
	_elm_lang$core$Task$succeed(_user$project$Logic_Types$JoinChannel));
var _user$project$Main$init = function (location) {
	var currentRoute = _user$project$Logic_Routing$parseLocation(location);
	return {
		ctor: '_Tuple2',
		_0: {
			route: currentRoute,
			musKey: 'C',
			index: 6,
			currentChord: {ctor: '[]'},
			displayedChords: _user$project$Views_Chords$startKey,
			notePosition: 80.0,
			showAccidental: '0',
			sliderValue: 1,
			navMenuOpen: false,
			pitchShift: 0,
			modalOpen: false,
			strumGroupNumber: '1',
			strumArrow: {
				ctor: '::',
				_0: {
					ctor: '::',
					_0: 1,
					_1: {
						ctor: '::',
						_0: 2,
						_1: {
							ctor: '::',
							_0: 1,
							_1: {
								ctor: '::',
								_0: 1,
								_1: {
									ctor: '::',
									_0: 2,
									_1: {
										ctor: '::',
										_0: 1,
										_1: {
											ctor: '::',
											_0: 1,
											_1: {
												ctor: '::',
												_0: 1,
												_1: {ctor: '[]'}
											}
										}
									}
								}
							}
						}
					}
				},
				_1: {
					ctor: '::',
					_0: {
						ctor: '::',
						_0: 1,
						_1: {
							ctor: '::',
							_0: 2,
							_1: {
								ctor: '::',
								_0: 1,
								_1: {
									ctor: '::',
									_0: 1,
									_1: {
										ctor: '::',
										_0: 2,
										_1: {
											ctor: '::',
											_0: 1,
											_1: {
												ctor: '::',
												_0: 1,
												_1: {
													ctor: '::',
													_0: 1,
													_1: {ctor: '[]'}
												}
											}
										}
									}
								}
							}
						}
					},
					_1: {
						ctor: '::',
						_0: {
							ctor: '::',
							_0: 1,
							_1: {
								ctor: '::',
								_0: 2,
								_1: {
									ctor: '::',
									_0: 1,
									_1: {
										ctor: '::',
										_0: 1,
										_1: {
											ctor: '::',
											_0: 2,
											_1: {
												ctor: '::',
												_0: 1,
												_1: {
													ctor: '::',
													_0: 1,
													_1: {
														ctor: '::',
														_0: 1,
														_1: {ctor: '[]'}
													}
												}
											}
										}
									}
								}
							}
						},
						_1: {
							ctor: '::',
							_0: {
								ctor: '::',
								_0: 1,
								_1: {
									ctor: '::',
									_0: 2,
									_1: {
										ctor: '::',
										_0: 1,
										_1: {
											ctor: '::',
											_0: 1,
											_1: {
												ctor: '::',
												_0: 2,
												_1: {
													ctor: '::',
													_0: 1,
													_1: {
														ctor: '::',
														_0: 1,
														_1: {
															ctor: '::',
															_0: 1,
															_1: {ctor: '[]'}
														}
													}
												}
											}
										}
									}
								}
							},
							_1: {ctor: '[]'}
						}
					}
				}
			},
			fingerPickPattern: {
				a: {
					ctor: '::',
					_0: 2,
					_1: {
						ctor: '::',
						_0: 0,
						_1: {
							ctor: '::',
							_0: 0,
							_1: {
								ctor: '::',
								_0: 3,
								_1: {
									ctor: '::',
									_0: 0,
									_1: {
										ctor: '::',
										_0: 1,
										_1: {
											ctor: '::',
											_0: 0,
											_1: {
												ctor: '::',
												_0: 2,
												_1: {ctor: '[]'}
											}
										}
									}
								}
							}
						}
					}
				},
				b: {
					ctor: '::',
					_0: 5,
					_1: {
						ctor: '::',
						_0: 0,
						_1: {
							ctor: '::',
							_0: 4,
							_1: {
								ctor: '::',
								_0: 0,
								_1: {
									ctor: '::',
									_0: 5,
									_1: {
										ctor: '::',
										_0: 0,
										_1: {
											ctor: '::',
											_0: 5,
											_1: {
												ctor: '::',
												_0: 0,
												_1: {ctor: '[]'}
											}
										}
									}
								}
							}
						}
					}
				}
			},
			phxSocket: _user$project$Main$initPhoenixSocket
		},
		_1: _user$project$Main$joinChannel
	};
};
var _user$project$Main$send = _elm_lang$core$Native_Platform.outgoingPort(
	'send',
	function (v) {
		return {
			note: {frequency: v.note.frequency, octave: v.note.octave, sustain: v.note.sustain},
			waveType: v.waveType
		};
	});
var _user$project$Main$update = F2(
	function (msg, model) {
		var _p0 = msg;
		switch (_p0.ctor) {
			case 'NoOp':
				return A2(
					_elm_lang$core$Platform_Cmd_ops['!'],
					model,
					{ctor: '[]'});
			case 'JoinChannel':
				var channel = _fbonetti$elm_phoenix_socket$Phoenix_Channel$init('chordChannel:chords');
				var _p1 = A2(_fbonetti$elm_phoenix_socket$Phoenix_Socket$join, channel, model.phxSocket);
				var phxSocket = _p1._0;
				var phxCmd = _p1._1;
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{phxSocket: phxSocket}),
					_1: A2(_elm_lang$core$Platform_Cmd$map, _user$project$Logic_Types$PhoenixMsg, phxCmd)
				};
			case 'PhoenixMsg':
				var _p2 = A2(_fbonetti$elm_phoenix_socket$Phoenix_Socket$update, _p0._0, model.phxSocket);
				var phxSocket = _p2._0;
				var phxCmd = _p2._1;
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{phxSocket: phxSocket}),
					_1: A2(_elm_lang$core$Platform_Cmd$map, _user$project$Logic_Types$PhoenixMsg, phxCmd)
				};
			case 'SendMessage':
				var payload = _elm_lang$core$Json_Encode$object(
					{
						ctor: '::',
						_0: {
							ctor: '_Tuple2',
							_0: 'key',
							_1: _elm_lang$core$Json_Encode$string(_p0._0)
						},
						_1: {ctor: '[]'}
					});
				var push_ = A2(
					_fbonetti$elm_phoenix_socket$Phoenix_Push$withPayload,
					payload,
					A2(_fbonetti$elm_phoenix_socket$Phoenix_Push$init, 'chord_select', 'chordChannel:chords'));
				var _p3 = A2(_fbonetti$elm_phoenix_socket$Phoenix_Socket$push, push_, model.phxSocket);
				var phxSocket = _p3._0;
				var phxCmd = _p3._1;
				return A2(
					_elm_lang$core$Platform_Cmd_ops['!'],
					_elm_lang$core$Native_Utils.update(
						model,
						{phxSocket: phxSocket}),
					{
						ctor: '::',
						_0: A2(_elm_lang$core$Platform_Cmd$map, _user$project$Logic_Types$PhoenixMsg, phxCmd),
						_1: {ctor: '[]'}
					});
			case 'ReceiveMessage':
				var updatedChords = A2(
					_elm_lang$core$Result$withDefault,
					_user$project$Views_Chords$startKey,
					A2(
						_elm_lang$core$Json_Decode$decodeString,
						_user$project$Main$chordDecoder,
						A2(_elm_lang$core$Json_Encode$encode, 0, _p0._0)));
				return A2(
					_elm_lang$core$Platform_Cmd_ops['!'],
					_elm_lang$core$Native_Utils.update(
						model,
						{displayedChords: updatedChords}),
					{ctor: '[]'});
			case 'ShowNavMenu':
				return A2(
					_elm_lang$core$Platform_Cmd_ops['!'],
					_elm_lang$core$Native_Utils.update(
						model,
						{navMenuOpen: !model.navMenuOpen, modalOpen: false}),
					{ctor: '[]'});
			case 'ShowModal':
				return A2(
					_elm_lang$core$Platform_Cmd_ops['!'],
					_elm_lang$core$Native_Utils.update(
						model,
						{modalOpen: !model.modalOpen}),
					{ctor: '[]'});
			case 'Randomize':
				var _p6 = _p0._1;
				var _p5 = _p0._0;
				var _p4 = model.route;
				switch (_p4.ctor) {
					case 'StrummingRoute':
						return {
							ctor: '_Tuple2',
							_0: model,
							_1: A2(
								_elm_lang$core$Random$generate,
								_user$project$Logic_Types$StrumArrowDirection,
								A2(
									_elm_lang$core$Random$list,
									4,
									A2(
										_elm_lang$core$Random$list,
										8,
										A2(_elm_lang$core$Random$int, _p5, _p6))))
						};
					case 'FingerPickingRoute':
						return {
							ctor: '_Tuple2',
							_0: model,
							_1: _elm_lang$core$Platform_Cmd$batch(
								{
									ctor: '::',
									_0: A2(
										_elm_lang$core$Random$generate,
										_user$project$Logic_Types$FingerPickPatternBuilderA,
										A2(
											_elm_lang$core$Random$list,
											8,
											A2(_elm_lang$core$Random$int, _p5, _p6))),
									_1: {
										ctor: '::',
										_0: A2(
											_elm_lang$core$Random$generate,
											_user$project$Logic_Types$FingerPickPatternBuilderB,
											A2(
												_elm_lang$core$Random$list,
												8,
												A2(_elm_lang$core$Random$int, _p5, _p6))),
										_1: {ctor: '[]'}
									}
								})
						};
					default:
						return A2(
							_elm_lang$core$Platform_Cmd_ops['!'],
							model,
							{ctor: '[]'});
				}
			case 'StrumArrowDirection':
				var _p8 = _p0._0;
				var _p7 = A2(_elm_lang$core$Debug$log, 'numList', _p8);
				return A2(
					_elm_lang$core$Platform_Cmd_ops['!'],
					_elm_lang$core$Native_Utils.update(
						model,
						{strumArrow: _p8}),
					{ctor: '[]'});
			case 'ChangeStrumGroupNumber':
				return A2(
					_elm_lang$core$Platform_Cmd_ops['!'],
					_elm_lang$core$Native_Utils.update(
						model,
						{strumGroupNumber: _p0._0}),
					{ctor: '[]'});
			case 'FingerPickPatternBuilderA':
				var pattern = model.fingerPickPattern;
				var newPattern = _elm_lang$core$Native_Utils.update(
					pattern,
					{a: _p0._0});
				return A2(
					_elm_lang$core$Platform_Cmd_ops['!'],
					_elm_lang$core$Native_Utils.update(
						model,
						{fingerPickPattern: newPattern}),
					{ctor: '[]'});
			case 'FingerPickPatternBuilderB':
				var pattern = model.fingerPickPattern;
				var newPattern = _elm_lang$core$Native_Utils.update(
					pattern,
					{b: _p0._0});
				return A2(
					_elm_lang$core$Platform_Cmd_ops['!'],
					_elm_lang$core$Native_Utils.update(
						model,
						{fingerPickPattern: newPattern}),
					{ctor: '[]'});
			case 'OnLocationChange':
				var _p9 = _p0._0;
				var newKey = A2(
					_elm_lang$core$Maybe$withDefault,
					'C',
					A2(_user$project$Logic_Routing$modelUpdateOnHash, model, _p9));
				var newRoute = _user$project$Logic_Routing$parseLocation(_p9);
				return A2(
					_elm_lang$core$Platform_Cmd_ops['!'],
					_elm_lang$core$Native_Utils.update(
						model,
						{route: newRoute, musKey: newKey, modalOpen: false, navMenuOpen: false}),
					{ctor: '[]'});
			case 'NewUrl':
				return {
					ctor: '_Tuple2',
					_0: model,
					_1: _elm_lang$navigation$Navigation$newUrl(_p0._0)
				};
			case 'ChangeKey':
				var _p10 = _p0._0;
				return A2(
					_ccapndave$elm_update_extra$Update_Extra_Infix_ops[':>'],
					{
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							model,
							{musKey: _p10, navMenuOpen: false}),
						_1: _user$project$Main$joinChannel
					},
					_user$project$Main$update(
						_user$project$Logic_Types$SendMessage(_p10)));
			case 'Play':
				return A2(
					_ccapndave$elm_update_extra$Update_Extra_Infix_ops[':>'],
					A2(
						_ccapndave$elm_update_extra$Update_Extra_Infix_ops[':>'],
						A2(
							_elm_lang$core$Platform_Cmd_ops['!'],
							_elm_lang$core$Native_Utils.update(
								model,
								{currentChord: _p0._0, pitchShift: _p0._1}),
							{ctor: '[]'}),
						_user$project$Main$update(_user$project$Logic_Types$ResetIndex)),
					_user$project$Main$update(_user$project$Logic_Types$SendNotes));
			case 'ResetIndex':
				return A2(
					_elm_lang$core$Platform_Cmd_ops['!'],
					_elm_lang$core$Native_Utils.update(
						model,
						{index: 0}),
					{ctor: '[]'});
			case 'SendNotes':
				var note = _user$project$Logic_Audio$noteSorter(
					A2(
						_elm_lang$core$Maybe$withDefault,
						'e2w',
						A2(_elm_community$list_extra$List_Extra$getAt, model.index, model.currentChord)));
				var shiftedNote = _elm_lang$core$Native_Utils.update(
					note,
					{
						frequency: note.frequency * Math.pow(
							1.059463,
							_elm_lang$core$Basics$toFloat(model.pitchShift)),
						sustain: note.sustain * (_elm_lang$core$Basics$toFloat(model.sliderValue) / 2)
					});
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{index: model.index + 1}),
					_1: _user$project$Main$send(
						A2(_user$project$Logic_Types$PlayBundle, shiftedNote, 'triangle'))
				};
			case 'DrawNote':
				var fretOffset = _user$project$Views_Fretboard$noteFretPos(_p0._0);
				var stringOffset = _user$project$Views_Fretboard$noteStringPos(_p0._1);
				var finalOffset = fretOffset + stringOffset;
				return A2(
					_elm_lang$core$Platform_Cmd_ops['!'],
					_elm_lang$core$Native_Utils.update(
						model,
						{notePosition: finalOffset, showAccidental: _p0._2}),
					{ctor: '[]'});
			default:
				var val = A2(
					_elm_lang$core$Result$withDefault,
					1,
					_elm_lang$core$String$toInt(_p0._0));
				return A2(
					_elm_lang$core$Platform_Cmd_ops['!'],
					_elm_lang$core$Native_Utils.update(
						model,
						{sliderValue: val}),
					{ctor: '[]'});
		}
	});
var _user$project$Main$main = A2(
	_elm_lang$navigation$Navigation$program,
	_user$project$Logic_Types$OnLocationChange,
	{init: _user$project$Main$init, update: _user$project$Main$update, view: _user$project$Views_MainViews$mainView, subscriptions: _user$project$Main$subscriptions})();
