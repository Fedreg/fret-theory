var _user$project$Views_FingerPick$printNotation = function (notes) {
	var strumNotationDotStyle = _elm_lang$html$Html_Attributes$style(
		{
			ctor: '::',
			_0: {ctor: '_Tuple2', _0: 'position', _1: 'absolute'},
			_1: {
				ctor: '::',
				_0: {ctor: '_Tuple2', _0: 'bottom', _1: '-30px'},
				_1: {
					ctor: '::',
					_0: {ctor: '_Tuple2', _0: 'right', _1: '-15px'},
					_1: {
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: 'fontSize', _1: '50px'},
						_1: {
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'color', _1: '#555'},
							_1: {ctor: '[]'}
						}
					}
				}
			}
		});
	var strumNotationFlagStyle = function (flag) {
		return _elm_lang$html$Html_Attributes$style(
			{
				ctor: '::',
				_0: {ctor: '_Tuple2', _0: 'position', _1: 'absolute'},
				_1: {
					ctor: '::',
					_0: {ctor: '_Tuple2', _0: 'top', _1: '-7px'},
					_1: {
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: 'right', _1: '-15px'},
						_1: {
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'width', _1: '15px'},
							_1: {
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: 'height', _1: '15px'},
								_1: {
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: 'transform', _1: 'skew(30deg)'},
									_1: {
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: 'visibility', _1: flag},
										_1: {
											ctor: '::',
											_0: {ctor: '_Tuple2', _0: 'fontSize', _1: '20px'},
											_1: {
												ctor: '::',
												_0: {ctor: '_Tuple2', _0: 'color', _1: '#555'},
												_1: {ctor: '[]'}
											}
										}
									}
								}
							}
						}
					}
				}
			});
	};
	var strumNotationContainerStyle = _elm_lang$html$Html_Attributes$style(
		{
			ctor: '::',
			_0: {ctor: '_Tuple2', _0: 'position', _1: 'relative'},
			_1: {
				ctor: '::',
				_0: {ctor: '_Tuple2', _0: 'height', _1: '35px'},
				_1: {
					ctor: '::',
					_0: {ctor: '_Tuple2', _0: 'borderRight', _1: '2px solid #555'},
					_1: {ctor: '[]'}
				}
			}
		});
	var baseStyles = function (fill) {
		return _elm_lang$html$Html_Attributes$style(
			{
				ctor: '::',
				_0: {ctor: '_Tuple2', _0: 'position', _1: 'absolute'},
				_1: {
					ctor: '::',
					_0: {ctor: '_Tuple2', _0: 'bottom', _1: '-10px'},
					_1: {
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: 'left', _1: '-5px'},
						_1: {
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'width', _1: '14px'},
							_1: {
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: 'height', _1: '15px'},
								_1: {
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: 'transform', _1: 'skew(-20deg)'},
									_1: {
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: 'border', _1: '2px solid #555'},
										_1: {
											ctor: '::',
											_0: {ctor: '_Tuple2', _0: 'borderRadius', _1: '10px'},
											_1: {
												ctor: '::',
												_0: {ctor: '_Tuple2', _0: 'backgroundColor', _1: fill},
												_1: {ctor: '[]'}
											}
										}
									}
								}
							}
						}
					}
				}
			});
	};
	var markup = F3(
		function (fill, dot, flag) {
			return A2(
				_elm_lang$html$Html$div,
				{
					ctor: '::',
					_0: strumNotationContainerStyle,
					_1: {ctor: '[]'}
				},
				{
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$div,
						{
							ctor: '::',
							_0: baseStyles(fill),
							_1: {ctor: '[]'}
						},
						{ctor: '[]'}),
					_1: {
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$div,
							{
								ctor: '::',
								_0: strumNotationFlagStyle(flag),
								_1: {ctor: '[]'}
							},
							{
								ctor: '::',
								_0: _elm_lang$html$Html$text(')'),
								_1: {ctor: '[]'}
							}),
						_1: {
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html$div,
								{
									ctor: '::',
									_0: strumNotationDotStyle,
									_1: {ctor: '[]'}
								},
								{
									ctor: '::',
									_0: _elm_lang$html$Html$text(dot),
									_1: {ctor: '[]'}
								}),
							_1: {ctor: '[]'}
						}
					}
				});
		});
	var _p0 = notes;
	switch (_p0) {
		case 0:
			return A2(
				_elm_lang$html$Html$div,
				{ctor: '[]'},
				{ctor: '[]'});
		case 1:
			return A3(markup, '#555', '', 'visible');
		case 2:
			return A3(markup, '#555', '', 'hidden');
		case 3:
			return A3(markup, '#555', '.', 'hidden');
		case 4:
			return A3(markup, 'none', '', 'hidden');
		default:
			return A2(
				_elm_lang$html$Html$div,
				{ctor: '[]'},
				{ctor: '[]'});
	}
};
var _user$project$Views_FingerPick$calculateNotation = F4(
	function (list, index, notes1, notes2) {
		calculateNotation:
		while (true) {
			var getter2 = function (a) {
				return A2(
					_elm_lang$core$Maybe$withDefault,
					1,
					A2(_elm_community$list_extra$List_Extra$getAt, index + a, notes2));
			};
			var possibleNotes2 = function (a) {
				return A2(
					_elm_lang$core$List$member,
					getter2(a),
					A2(_elm_lang$core$List$range, 1, 5));
			};
			var getter1 = function (a) {
				return A2(
					_elm_lang$core$Maybe$withDefault,
					1,
					A2(_elm_community$list_extra$List_Extra$getAt, index + a, notes1));
			};
			var possibleNotes1 = function (a) {
				return A2(
					_elm_lang$core$List$member,
					getter1(a),
					A2(_elm_lang$core$List$range, 1, 5));
			};
			var possibleNotes = function (a) {
				return possibleNotes1(a) || possibleNotes2(a);
			};
			var notation = (_elm_lang$core$Native_Utils.eq(
				possibleNotes(0),
				true) && _elm_lang$core$Native_Utils.eq(
				possibleNotes(1),
				false)) ? (_elm_lang$core$Native_Utils.eq(
				possibleNotes(2),
				true) ? 2 : (_elm_lang$core$Native_Utils.eq(
				possibleNotes(3),
				true) ? 3 : 4)) : ((_elm_lang$core$Native_Utils.eq(
				possibleNotes(0),
				true) && _elm_lang$core$Native_Utils.eq(
				possibleNotes(1),
				true)) ? 1 : ((_elm_lang$core$Native_Utils.eq(
				possibleNotes(4),
				true) && _elm_lang$core$Native_Utils.eq(
				possibleNotes(7),
				false)) ? 4 : 0));
			if (_elm_lang$core$Native_Utils.cmp(
				index,
				_elm_lang$core$List$length(notes1)) < 0) {
				var _v1 = {ctor: '::', _0: notation, _1: list},
					_v2 = index + 1,
					_v3 = notes1,
					_v4 = notes2;
				list = _v1;
				index = _v2;
				notes1 = _v3;
				notes2 = _v4;
				continue calculateNotation;
			} else {
				return _elm_lang$core$List$reverse(list);
			}
		}
	});
var _user$project$Views_FingerPick$stringView = A2(
	_elm_lang$html$Html$div,
	{ctor: '[]'},
	{
		ctor: '::',
		_0: A2(
			_elm_lang$html$Html$div,
			{
				ctor: '::',
				_0: _user$project$Styles_FingerPickStyles$stringStyle,
				_1: {ctor: '[]'}
			},
			{ctor: '[]'}),
		_1: {
			ctor: '::',
			_0: A2(
				_elm_lang$html$Html$div,
				{
					ctor: '::',
					_0: _user$project$Styles_FingerPickStyles$stringStyle,
					_1: {ctor: '[]'}
				},
				{ctor: '[]'}),
			_1: {
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$div,
					{
						ctor: '::',
						_0: _user$project$Styles_FingerPickStyles$stringStyle,
						_1: {ctor: '[]'}
					},
					{ctor: '[]'}),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$div,
						{
							ctor: '::',
							_0: _user$project$Styles_FingerPickStyles$stringStyle,
							_1: {ctor: '[]'}
						},
						{ctor: '[]'}),
					_1: {
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$div,
							{
								ctor: '::',
								_0: _user$project$Styles_FingerPickStyles$stringStyle,
								_1: {ctor: '[]'}
							},
							{ctor: '[]'}),
						_1: {
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html$div,
								{
									ctor: '::',
									_0: _user$project$Styles_FingerPickStyles$stringStyle,
									_1: {ctor: '[]'}
								},
								{ctor: '[]'}),
							_1: {ctor: '[]'}
						}
					}
				}
			}
		}
	});
var _user$project$Views_FingerPick$fret = function (num) {
	var opacity = function () {
		var _p1 = num;
		if (_p1 === 0) {
			return '0';
		} else {
			return '1';
		}
	}();
	var height = function () {
		var _p2 = num;
		switch (_p2) {
			case 1:
				return '-182px';
			case 2:
				return '-148px';
			case 3:
				return '-115px';
			case 4:
				return '-83px';
			case 5:
				return '-50px';
			default:
				return '0';
		}
	}();
	var baseStyles = _elm_lang$html$Html_Attributes$style(
		{
			ctor: '::',
			_0: {ctor: '_Tuple2', _0: 'display', _1: 'flex'},
			_1: {
				ctor: '::',
				_0: {ctor: '_Tuple2', _0: 'marginTop', _1: height},
				_1: {
					ctor: '::',
					_0: {ctor: '_Tuple2', _0: 'width', _1: '120px'},
					_1: {
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: 'fontSize', _1: '20px'},
						_1: {
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'color', _1: '#fff'},
							_1: {
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: 'justifyContent', _1: 'center'},
								_1: {
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: 'opacity', _1: opacity},
									_1: {ctor: '[]'}
								}
							}
						}
					}
				}
			}
		});
	var message = function () {
		var _p3 = num;
		switch (_p3) {
			case 1:
				return '0';
			case 2:
				return '1';
			case 3:
				return '2';
			case 4:
				return '2';
			case 5:
				return '0';
			default:
				return '';
		}
	}();
	return A2(
		_elm_lang$html$Html$div,
		{
			ctor: '::',
			_0: baseStyles,
			_1: {ctor: '[]'}
		},
		{
			ctor: '::',
			_0: _elm_lang$html$Html$text(message),
			_1: {ctor: '[]'}
		});
};
var _user$project$Views_FingerPick$fingerPickGroup = F3(
	function (scale, notes1, notes2) {
		var frets = function (a) {
			return A2(
				_elm_lang$html$Html$div,
				{ctor: '[]'},
				{
					ctor: '::',
					_0: _user$project$Views_FingerPick$fret(a),
					_1: {ctor: '[]'}
				});
		};
		var notation = function (a) {
			return A2(
				_elm_lang$html$Html$div,
				{
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$style(
						{
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'width', _1: '10px'},
							_1: {
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: 'margin', _1: '20px 55px 0'},
								_1: {ctor: '[]'}
							}
						}),
					_1: {ctor: '[]'}
				},
				{
					ctor: '::',
					_0: _user$project$Views_FingerPick$printNotation(a),
					_1: {ctor: '[]'}
				});
		};
		var beats = function (a) {
			return A2(
				_elm_lang$html$Html$div,
				{
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$style(
						{
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'width', _1: '10px'},
							_1: {
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: 'margin', _1: '0 55px 0'},
								_1: {ctor: '[]'}
							}
						}),
					_1: {ctor: '[]'}
				},
				{
					ctor: '::',
					_0: _elm_lang$html$Html$text(
						_elm_lang$core$Basics$toString(a)),
					_1: {ctor: '[]'}
				});
		};
		return A2(
			_elm_lang$html$Html$div,
			{
				ctor: '::',
				_0: _user$project$Styles_FingerPickStyles$fingerPickGroupStyle(scale),
				_1: {ctor: '[]'}
			},
			{
				ctor: '::',
				_0: _user$project$Views_FingerPick$stringView,
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$div,
						{
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$style(
								{
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: 'display', _1: 'flex'},
									_1: {ctor: '[]'}
								}),
							_1: {ctor: '[]'}
						},
						A2(_elm_lang$core$List$map, frets, notes1)),
					_1: {
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$div,
							{
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$style(
									{
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: 'display', _1: 'flex'},
										_1: {ctor: '[]'}
									}),
								_1: {ctor: '[]'}
							},
							A2(_elm_lang$core$List$map, frets, notes2)),
						_1: {
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html$div,
								{
									ctor: '::',
									_0: _elm_lang$html$Html_Attributes$style(
										{
											ctor: '::',
											_0: {ctor: '_Tuple2', _0: 'display', _1: 'flex'},
											_1: {
												ctor: '::',
												_0: {ctor: '_Tuple2', _0: 'color', _1: '#F2B632'},
												_1: {ctor: '[]'}
											}
										}),
									_1: {ctor: '[]'}
								},
								A2(
									_elm_lang$core$List$map,
									beats,
									A2(_elm_lang$core$List$range, 1, 8))),
							_1: {
								ctor: '::',
								_0: A2(
									_elm_lang$html$Html$div,
									{
										ctor: '::',
										_0: _elm_lang$html$Html_Attributes$style(
											{
												ctor: '::',
												_0: {ctor: '_Tuple2', _0: 'display', _1: 'flex'},
												_1: {ctor: '[]'}
											}),
										_1: {ctor: '[]'}
									},
									A2(
										_elm_lang$core$List$map,
										notation,
										A4(
											_user$project$Views_FingerPick$calculateNotation,
											{ctor: '[]'},
											0,
											notes1,
											notes2))),
								_1: {ctor: '[]'}
							}
						}
					}
				}
			});
	});
var _user$project$Views_FingerPick$fingerPickingPage = function (model) {
	return A2(
		_elm_lang$html$Html$div,
		{
			ctor: '::',
			_0: _user$project$Styles_FingerPickStyles$fingerPickingPageStyle,
			_1: {ctor: '[]'}
		},
		{
			ctor: '::',
			_0: A3(_user$project$Views_FingerPick$fingerPickGroup, '1,1', model.fingerPickPattern.a, model.fingerPickPattern.b),
			_1: {
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$button,
					{
						ctor: '::',
						_0: _user$project$Styles_FingerPickStyles$buttonStyle,
						_1: {
							ctor: '::',
							_0: _elm_lang$html$Html_Events$onClick(
								A2(_user$project$Logic_Types$Randomize, 0, 8)),
							_1: {ctor: '[]'}
						}
					},
					{
						ctor: '::',
						_0: _elm_lang$html$Html$text('Generate Random Fingerpicking Pattern'),
						_1: {ctor: '[]'}
					}),
				_1: {ctor: '[]'}
			}
		});
};
